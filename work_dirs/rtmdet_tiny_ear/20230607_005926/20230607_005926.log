2023/06/07 00:59:26 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.9.16 (main, Mar  8 2023, 10:39:24) [MSC v.1916 64 bit (AMD64)]
    CUDA available: False
    numpy_random_seed: 737328578
    GCC: n/a
    PyTorch: 1.12.1
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930147
  - Intel(R) MKL-DNN v2.6.0 (Git Hash N/A)
  - OpenMP 2019
  - CPU capability usage: AVX2
  - Build settings: BUILD_TYPE=Release, CXX_COMPILER=C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=0, USE_CUDNN=OFF, USE_EIGEN_FOR_BLAS=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1a0
    OpenCV: 4.7.0
    MMEngine: 0.7.1

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/07 00:59:27 - mmengine - INFO - Config:
dataset_type = 'CocoDataset'
data_root = 'MMPosehomework/Ear210_Dataset_coco/Ear210_Keypoint_Dataset_coco/'
metainfo = dict(classes=('ear', ))
NUM_CLASSES = 1
load_from = None
MAX_EPOCHS = 200
TRAIN_BATCH_SIZE = 8
VAL_BATCH_SIZE = 4
stage2_num_epochs = 20
base_lr = 0.004
VAL_INTERVAL = 5
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=1),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook',
        interval=10,
        max_keep_ckpts=2,
        save_best='coco/bbox_mAP'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
resume = False
train_cfg = dict(
    type='EpochBasedTrainLoop',
    max_epochs=200,
    val_interval=5,
    dynamic_intervals=[(180, 1)])
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=1e-05, by_epoch=False, begin=0,
        end=1000),
    dict(
        type='CosineAnnealingLR',
        eta_min=0.0002,
        begin=150,
        end=300,
        T_max=150,
        by_epoch=True,
        convert_to_iter_based=True)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.004, weight_decay=0.05),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))
auto_scale_lr = dict(enable=False, base_batch_size=16)
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='CachedMosaic',
        img_scale=(640, 640),
        pad_val=114.0,
        max_cached_images=20,
        random_pop=False),
    dict(
        type='RandomResize',
        scale=(1280, 1280),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='CachedMixUp',
        img_scale=(640, 640),
        ratio_range=(1.0, 1.0),
        max_cached_images=10,
        random_pop=False,
        pad_val=(114, 114, 114),
        prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(640, 640), keep_ratio=True),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=8,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=None,
    dataset=dict(
        type='CocoDataset',
        data_root=
        'MMPosehomework/Ear210_Dataset_coco/Ear210_Keypoint_Dataset_coco/',
        metainfo=dict(classes=('ear', )),
        ann_file='train_coco.json',
        data_prefix=dict(img='images/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='CachedMosaic',
                img_scale=(640, 640),
                pad_val=114.0,
                max_cached_images=20,
                random_pop=False),
            dict(
                type='RandomResize',
                scale=(1280, 1280),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='CachedMixUp',
                img_scale=(640, 640),
                ratio_range=(1.0, 1.0),
                max_cached_images=10,
                random_pop=False,
                pad_val=(114, 114, 114),
                prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None),
    pin_memory=True)
val_dataloader = dict(
    batch_size=4,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root=
        'MMPosehomework/Ear210_Dataset_coco/Ear210_Keypoint_Dataset_coco/',
        metainfo=dict(classes=('ear', )),
        ann_file='val_coco.json',
        data_prefix=dict(img='images/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
test_dataloader = dict(
    batch_size=4,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root=
        'MMPosehomework/Ear210_Dataset_coco/Ear210_Keypoint_Dataset_coco/',
        metainfo=dict(classes=('ear', )),
        ann_file='val_coco.json',
        data_prefix=dict(img='images/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
val_evaluator = dict(
    type='CocoMetric',
    ann_file=
    'MMPosehomework/Ear210_Dataset_coco/Ear210_Keypoint_Dataset_coco/val_coco.json',
    metric=['bbox'],
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
test_evaluator = dict(
    type='CocoMetric',
    ann_file=
    'MMPosehomework/Ear210_Dataset_coco/Ear210_Keypoint_Dataset_coco/val_coco.json',
    metric=['bbox'],
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.6), max_per_img=100))
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale': (640, 640),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (320, 320),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (960, 960),
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 1.0
                    }, {
                        'type': 'RandomFlip',
                        'prob': 0.0
                    }],
                    [{
                        'type': 'Pad',
                        'size': (960, 960),
                        'pad_val': {
                            'img': (114, 114, 114)
                        }
                    }],
                    [{
                        'type':
                        'PackDetInputs',
                        'meta_keys':
                        ('img_id', 'img_path', 'ori_shape', 'img_shape',
                         'scale_factor', 'flip', 'flip_direction')
                    }]])
]
model = dict(
    type='RTMDet',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[57.375, 57.12, 58.395],
        bgr_to_rgb=False,
        batch_augments=None),
    backbone=dict(
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=0.167,
        widen_factor=0.375,
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
        )),
    neck=dict(
        type='CSPNeXtPAFPN',
        in_channels=[96, 192, 384],
        out_channels=96,
        num_csp_blocks=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    bbox_head=dict(
        type='RTMDetSepBNHead',
        num_classes=1,
        in_channels=96,
        stacked_convs=2,
        feat_channels=96,
        anchor_generator=dict(
            type='MlvlPointGenerator', offset=0, strides=[8, 16, 32]),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        loss_cls=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        with_objectness=False,
        exp_on_reg=False,
        share_conv=True,
        pred_kernel_size=1,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    train_cfg=dict(
        assigner=dict(type='DynamicSoftLabelAssigner', topk=13),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=30000,
        min_bbox_size=0,
        score_thr=0.001,
        nms=dict(type='nms', iou_threshold=0.65),
        max_per_img=300))
train_pipeline_stage2 = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='RandomResize',
        scale=(640, 640),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='PackDetInputs')
]
custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='PipelineSwitchHook',
        switch_epoch=180,
        switch_pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='RandomResize',
                scale=(640, 640),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='PackDetInputs')
        ])
]
launcher = 'none'
work_dir = './work_dirs\\rtmdet_tiny_ear'

2023/06/07 00:59:29 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/07 00:59:29 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2023/06/07 00:59:30 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2023/06/07 00:59:32 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2023/06/07 00:59:42 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/07 00:59:42 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/07 00:59:42 - mmengine - INFO - Checkpoints will be saved to C:\Users\liuya\mmdetection\work_dirs\rtmdet_tiny_ear.
2023/06/07 01:00:02 - mmengine - INFO - Epoch(train)   [1][ 1/21]  lr: 4.0000e-08  eta: 23:25:42  time: 20.0864  data_time: 12.0692  loss: 0.1121  loss_cls: 0.0718  loss_bbox: 0.0403
2023/06/07 01:00:08 - mmengine - INFO - Epoch(train)   [1][ 2/21]  lr: 4.0440e-06  eta: 15:16:48  time: 13.1036  data_time: 6.0424  loss: 0.1092  loss_cls: 0.0719  loss_bbox: 0.0373
2023/06/07 01:00:14 - mmengine - INFO - Epoch(train)   [1][ 3/21]  lr: 8.0479e-06  eta: 12:15:57  time: 10.5212  data_time: 4.0387  loss: 0.0984  loss_cls: 0.0718  loss_bbox: 0.0266
2023/06/07 01:00:19 - mmengine - INFO - Epoch(train)   [1][ 4/21]  lr: 1.2052e-05  eta: 10:45:09  time: 9.2253  data_time: 3.0489  loss: 0.0957  loss_cls: 0.0718  loss_bbox: 0.0239
2023/06/07 01:00:25 - mmengine - INFO - Epoch(train)   [1][ 5/21]  lr: 1.6056e-05  eta: 9:52:06  time: 8.4688  data_time: 2.4613  loss: 0.0970  loss_cls: 0.0717  loss_bbox: 0.0253
2023/06/07 01:00:30 - mmengine - INFO - Epoch(train)   [1][ 6/21]  lr: 2.0060e-05  eta: 9:14:09  time: 7.9280  data_time: 2.0642  loss: 0.1039  loss_cls: 0.0716  loss_bbox: 0.0322
2023/06/07 01:00:35 - mmengine - INFO - Epoch(train)   [1][ 7/21]  lr: 2.4064e-05  eta: 8:46:14  time: 7.5303  data_time: 1.7738  loss: 0.1016  loss_cls: 0.0715  loss_bbox: 0.0300
2023/06/07 01:00:40 - mmengine - INFO - Epoch(train)   [1][ 8/21]  lr: 2.8068e-05  eta: 8:25:44  time: 7.2388  data_time: 1.5540  loss: 0.1041  loss_cls: 0.0715  loss_bbox: 0.0326
2023/06/07 01:00:45 - mmengine - INFO - Epoch(train)   [1][ 9/21]  lr: 3.2072e-05  eta: 8:09:49  time: 7.0126  data_time: 1.3902  loss: 0.1083  loss_cls: 0.0714  loss_bbox: 0.0370
2023/06/07 01:00:50 - mmengine - INFO - Epoch(train)   [1][10/21]  lr: 3.6076e-05  eta: 7:56:05  time: 6.8175  data_time: 1.2518  loss: 0.1105  loss_cls: 0.0713  loss_bbox: 0.0392
2023/06/07 01:00:56 - mmengine - INFO - Epoch(train)   [1][11/21]  lr: 4.0080e-05  eta: 7:45:36  time: 6.6690  data_time: 1.1404  loss: 0.1102  loss_cls: 0.0712  loss_bbox: 0.0390
2023/06/07 01:01:00 - mmengine - INFO - Epoch(train)   [1][12/21]  lr: 4.4084e-05  eta: 7:33:50  time: 6.5021  data_time: 1.0480  loss: 0.1144  loss_cls: 0.0711  loss_bbox: 0.0433
2023/06/07 01:01:04 - mmengine - INFO - Epoch(train)   [1][13/21]  lr: 4.8088e-05  eta: 7:19:07  time: 6.2927  data_time: 0.9698  loss: 0.1125  loss_cls: 0.0710  loss_bbox: 0.0414
2023/06/07 01:01:08 - mmengine - INFO - Epoch(train)   [1][14/21]  lr: 5.2092e-05  eta: 7:05:32  time: 6.0995  data_time: 0.9017  loss: 0.1137  loss_cls: 0.0709  loss_bbox: 0.0428
2023/06/07 01:01:11 - mmengine - INFO - Epoch(train)   [1][15/21]  lr: 5.6095e-05  eta: 6:53:31  time: 5.9286  data_time: 0.8426  loss: 0.1140  loss_cls: 0.0708  loss_bbox: 0.0432
2023/06/07 01:01:15 - mmengine - INFO - Epoch(train)   [1][16/21]  lr: 6.0099e-05  eta: 6:42:48  time: 5.7763  data_time: 0.7909  loss: 0.1148  loss_cls: 0.0707  loss_bbox: 0.0441
2023/06/07 01:01:18 - mmengine - INFO - Epoch(train)   [1][17/21]  lr: 6.4103e-05  eta: 6:33:31  time: 5.6447  data_time: 0.7465  loss: 0.1134  loss_cls: 0.0706  loss_bbox: 0.0428
2023/06/07 01:01:22 - mmengine - INFO - Epoch(train)   [1][18/21]  lr: 6.8107e-05  eta: 6:25:23  time: 5.5292  data_time: 0.7084  loss: 0.1153  loss_cls: 0.0704  loss_bbox: 0.0449
2023/06/07 01:01:25 - mmengine - INFO - Epoch(train)   [1][19/21]  lr: 7.2111e-05  eta: 6:18:21  time: 5.4296  data_time: 0.6744  loss: 0.1213  loss_cls: 0.0703  loss_bbox: 0.0510
2023/06/07 01:01:29 - mmengine - INFO - Epoch(train)   [1][20/21]  lr: 7.6115e-05  eta: 6:11:42  time: 5.3355  data_time: 0.6413  loss: 0.1243  loss_cls: 0.0701  loss_bbox: 0.0542
2023/06/07 01:01:33 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:01:33 - mmengine - INFO - Epoch(train)   [1][21/21]  lr: 8.0119e-05  eta: 6:05:49  time: 5.2522  data_time: 0.6116  loss: 0.1415  loss_cls: 0.0703  loss_bbox: 0.0712
2023/06/07 01:01:40 - mmengine - INFO - Epoch(train)   [2][ 1/21]  lr: 8.4123e-05  eta: 6:13:58  time: 5.3706  data_time: 0.7224  loss: 0.1426  loss_cls: 0.0701  loss_bbox: 0.0724
2023/06/07 01:01:44 - mmengine - INFO - Epoch(train)   [2][ 2/21]  lr: 8.8127e-05  eta: 6:10:00  time: 5.3150  data_time: 0.6937  loss: 0.1555  loss_cls: 0.0706  loss_bbox: 0.0849
2023/06/07 01:01:48 - mmengine - INFO - Epoch(train)   [2][ 3/21]  lr: 9.2131e-05  eta: 6:05:52  time: 5.2568  data_time: 0.6681  loss: 0.1685  loss_cls: 0.0704  loss_bbox: 0.0981
2023/06/07 01:01:52 - mmengine - INFO - Epoch(train)   [2][ 4/21]  lr: 9.6135e-05  eta: 6:02:10  time: 5.2049  data_time: 0.6439  loss: 0.2122  loss_cls: 0.0768  loss_bbox: 0.1355
2023/06/07 01:01:56 - mmengine - INFO - Epoch(train)   [2][ 5/21]  lr: 1.0014e-04  eta: 5:58:36  time: 5.1549  data_time: 0.6221  loss: 0.2085  loss_cls: 0.0763  loss_bbox: 0.1322
2023/06/07 01:02:00 - mmengine - INFO - Epoch(train)   [2][ 6/21]  lr: 1.0414e-04  eta: 5:55:05  time: 5.1056  data_time: 0.5998  loss: 0.2076  loss_cls: 0.0759  loss_bbox: 0.1317
2023/06/07 01:02:04 - mmengine - INFO - Epoch(train)   [2][ 7/21]  lr: 1.0815e-04  eta: 5:52:02  time: 5.0629  data_time: 0.5790  loss: 0.2364  loss_cls: 0.0785  loss_bbox: 0.1579
2023/06/07 01:02:09 - mmengine - INFO - Epoch(train)   [2][ 8/21]  lr: 1.1215e-04  eta: 5:51:47  time: 5.0604  data_time: 0.5617  loss: 0.2972  loss_cls: 0.1054  loss_bbox: 0.1918
2023/06/07 01:02:14 - mmengine - INFO - Epoch(train)   [2][ 9/21]  lr: 1.1615e-04  eta: 5:51:57  time: 5.0642  data_time: 0.5435  loss: 0.3098  loss_cls: 0.1061  loss_bbox: 0.2037
2023/06/07 01:02:19 - mmengine - INFO - Epoch(train)   [2][10/21]  lr: 1.2016e-04  eta: 5:51:12  time: 5.0546  data_time: 0.5270  loss: 0.3163  loss_cls: 0.1052  loss_bbox: 0.2112
2023/06/07 01:02:23 - mmengine - INFO - Epoch(train)   [2][11/21]  lr: 1.2416e-04  eta: 5:48:42  time: 5.0199  data_time: 0.5111  loss: 0.3638  loss_cls: 0.1232  loss_bbox: 0.2406
2023/06/07 01:02:28 - mmengine - INFO - Epoch(train)   [2][12/21]  lr: 1.2817e-04  eta: 5:48:27  time: 5.0174  data_time: 0.4959  loss: 0.4097  loss_cls: 0.1399  loss_bbox: 0.2698
2023/06/07 01:02:33 - mmengine - INFO - Epoch(train)   [2][13/21]  lr: 1.3217e-04  eta: 5:48:50  time: 5.0241  data_time: 0.4814  loss: 0.4534  loss_cls: 0.1555  loss_bbox: 0.2979
2023/06/07 01:02:38 - mmengine - INFO - Epoch(train)   [2][14/21]  lr: 1.3617e-04  eta: 5:48:44  time: 5.0238  data_time: 0.4690  loss: 0.4871  loss_cls: 0.1714  loss_bbox: 0.3158
2023/06/07 01:02:43 - mmengine - INFO - Epoch(train)   [2][15/21]  lr: 1.4018e-04  eta: 5:48:31  time: 5.0221  data_time: 0.4564  loss: 0.4985  loss_cls: 0.1688  loss_bbox: 0.3297
2023/06/07 01:02:48 - mmengine - INFO - Epoch(train)   [2][16/21]  lr: 1.4418e-04  eta: 5:48:13  time: 5.0190  data_time: 0.4445  loss: 0.5301  loss_cls: 0.1809  loss_bbox: 0.3492
2023/06/07 01:02:53 - mmengine - INFO - Epoch(train)   [2][17/21]  lr: 1.4819e-04  eta: 5:47:55  time: 5.0157  data_time: 0.4332  loss: 0.5248  loss_cls: 0.1782  loss_bbox: 0.3466
2023/06/07 01:02:58 - mmengine - INFO - Epoch(train)   [2][18/21]  lr: 1.5219e-04  eta: 5:47:38  time: 5.0129  data_time: 0.4226  loss: 0.5390  loss_cls: 0.1774  loss_bbox: 0.3616
2023/06/07 01:03:03 - mmengine - INFO - Epoch(train)   [2][19/21]  lr: 1.5619e-04  eta: 5:47:24  time: 5.0106  data_time: 0.4141  loss: 0.5592  loss_cls: 0.1810  loss_bbox: 0.3782
2023/06/07 01:03:07 - mmengine - INFO - Epoch(train)   [2][20/21]  lr: 1.6020e-04  eta: 5:47:00  time: 5.0062  data_time: 0.4044  loss: 0.5835  loss_cls: 0.1915  loss_bbox: 0.3919
2023/06/07 01:03:12 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:03:12 - mmengine - INFO - Epoch(train)   [2][21/21]  lr: 1.6420e-04  eta: 5:46:46  time: 5.0040  data_time: 0.3966  loss: 0.5903  loss_cls: 0.1922  loss_bbox: 0.3982
2023/06/07 01:03:22 - mmengine - INFO - Epoch(train)   [3][ 1/21]  lr: 1.6821e-04  eta: 5:54:44  time: 5.1202  data_time: 0.4839  loss: 0.6049  loss_cls: 0.1953  loss_bbox: 0.4097
2023/06/07 01:03:28 - mmengine - INFO - Epoch(train)   [3][ 2/21]  lr: 1.7221e-04  eta: 5:55:01  time: 5.1254  data_time: 0.4736  loss: 0.6180  loss_cls: 0.1952  loss_bbox: 0.4227
2023/06/07 01:03:33 - mmengine - INFO - Epoch(train)   [3][ 3/21]  lr: 1.7621e-04  eta: 5:54:57  time: 5.1258  data_time: 0.4634  loss: 0.6435  loss_cls: 0.2025  loss_bbox: 0.4410
2023/06/07 01:03:38 - mmengine - INFO - Epoch(train)   [3][ 4/21]  lr: 1.8022e-04  eta: 5:54:43  time: 5.1235  data_time: 0.4537  loss: 0.7288  loss_cls: 0.2719  loss_bbox: 0.4569
2023/06/07 01:03:43 - mmengine - INFO - Epoch(train)   [3][ 5/21]  lr: 1.8422e-04  eta: 5:54:43  time: 5.1247  data_time: 0.4464  loss: 0.7470  loss_cls: 0.2809  loss_bbox: 0.4660
2023/06/07 01:03:48 - mmengine - INFO - Epoch(train)   [3][ 6/21]  lr: 1.8823e-04  eta: 5:54:46  time: 5.1269  data_time: 0.4377  loss: 0.7585  loss_cls: 0.2876  loss_bbox: 0.4709
2023/06/07 01:03:54 - mmengine - INFO - Epoch(train)   [3][ 7/21]  lr: 1.9223e-04  eta: 5:55:07  time: 5.1332  data_time: 0.4304  loss: 0.7675  loss_cls: 0.2858  loss_bbox: 0.4817
2023/06/07 01:03:59 - mmengine - INFO - Epoch(train)   [3][ 8/21]  lr: 1.9623e-04  eta: 5:54:57  time: 5.1320  data_time: 0.4222  loss: 0.7813  loss_cls: 0.2862  loss_bbox: 0.4951
2023/06/07 01:04:04 - mmengine - INFO - Epoch(train)   [3][ 9/21]  lr: 2.0024e-04  eta: 5:54:55  time: 4.8336  data_time: 0.1817  loss: 0.8091  loss_cls: 0.2989  loss_bbox: 0.5103
2023/06/07 01:04:09 - mmengine - INFO - Epoch(train)   [3][10/21]  lr: 2.0424e-04  eta: 5:54:50  time: 4.8140  data_time: 0.1820  loss: 0.8341  loss_cls: 0.3104  loss_bbox: 0.5237
2023/06/07 01:04:14 - mmengine - INFO - Epoch(train)   [3][11/21]  lr: 2.0825e-04  eta: 5:54:49  time: 4.8103  data_time: 0.1817  loss: 0.8650  loss_cls: 0.3249  loss_bbox: 0.5402
2023/06/07 01:04:19 - mmengine - INFO - Epoch(train)   [3][12/21]  lr: 2.1225e-04  eta: 5:54:41  time: 4.8057  data_time: 0.1807  loss: 0.8903  loss_cls: 0.3348  loss_bbox: 0.5555
2023/06/07 01:04:25 - mmengine - INFO - Epoch(train)   [3][13/21]  lr: 2.1625e-04  eta: 5:54:37  time: 4.7996  data_time: 0.1804  loss: 0.9175  loss_cls: 0.3470  loss_bbox: 0.5705
2023/06/07 01:04:29 - mmengine - INFO - Epoch(train)   [3][14/21]  lr: 2.2026e-04  eta: 5:54:13  time: 4.7928  data_time: 0.1794  loss: 0.9442  loss_cls: 0.3540  loss_bbox: 0.5902
2023/06/07 01:04:34 - mmengine - INFO - Epoch(train)   [3][15/21]  lr: 2.2426e-04  eta: 5:53:50  time: 4.7877  data_time: 0.1791  loss: 0.9745  loss_cls: 0.3689  loss_bbox: 0.6056
2023/06/07 01:04:39 - mmengine - INFO - Epoch(train)   [3][16/21]  lr: 2.2827e-04  eta: 5:53:29  time: 4.7817  data_time: 0.1791  loss: 1.0011  loss_cls: 0.3825  loss_bbox: 0.6186
2023/06/07 01:04:44 - mmengine - INFO - Epoch(train)   [3][17/21]  lr: 2.3227e-04  eta: 5:53:07  time: 4.7752  data_time: 0.1780  loss: 1.0282  loss_cls: 0.3932  loss_bbox: 0.6349
2023/06/07 01:04:49 - mmengine - INFO - Epoch(train)   [3][18/21]  lr: 2.3627e-04  eta: 5:52:48  time: 4.7722  data_time: 0.1782  loss: 1.0604  loss_cls: 0.3986  loss_bbox: 0.6618
2023/06/07 01:04:54 - mmengine - INFO - Epoch(train)   [3][19/21]  lr: 2.4028e-04  eta: 5:52:29  time: 4.7668  data_time: 0.1782  loss: 1.0890  loss_cls: 0.4079  loss_bbox: 0.6811
2023/06/07 01:04:58 - mmengine - INFO - Epoch(train)   [3][20/21]  lr: 2.4428e-04  eta: 5:51:10  time: 4.7536  data_time: 0.1779  loss: 1.1137  loss_cls: 0.4162  loss_bbox: 0.6975
2023/06/07 01:05:02 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:05:02 - mmengine - INFO - Epoch(train)   [3][21/21]  lr: 2.4829e-04  eta: 5:49:33  time: 4.7518  data_time: 0.1776  loss: 1.1397  loss_cls: 0.4274  loss_bbox: 0.7124
2023/06/07 01:05:09 - mmengine - INFO - Epoch(train)   [4][ 1/21]  lr: 2.5229e-04  eta: 5:52:15  time: 4.8331  data_time: 0.2314  loss: 1.1677  loss_cls: 0.4404  loss_bbox: 0.7273
2023/06/07 01:05:14 - mmengine - INFO - Epoch(train)   [4][ 2/21]  lr: 2.5629e-04  eta: 5:51:16  time: 4.8477  data_time: 0.2327  loss: 1.1961  loss_cls: 0.4546  loss_bbox: 0.7416
2023/06/07 01:05:18 - mmengine - INFO - Epoch(train)   [4][ 3/21]  lr: 2.6030e-04  eta: 5:49:58  time: 4.8565  data_time: 0.2330  loss: 1.2284  loss_cls: 0.4689  loss_bbox: 0.7595
2023/06/07 01:05:22 - mmengine - INFO - Epoch(train)   [4][ 4/21]  lr: 2.6430e-04  eta: 5:49:29  time: 4.8795  data_time: 0.2329  loss: 1.2537  loss_cls: 0.4796  loss_bbox: 0.7741
2023/06/07 01:05:27 - mmengine - INFO - Epoch(train)   [4][ 5/21]  lr: 2.6831e-04  eta: 5:49:31  time: 4.9119  data_time: 0.2336  loss: 1.2817  loss_cls: 0.4876  loss_bbox: 0.7942
2023/06/07 01:05:33 - mmengine - INFO - Epoch(train)   [4][ 6/21]  lr: 2.7231e-04  eta: 5:49:31  time: 4.9423  data_time: 0.2330  loss: 1.3057  loss_cls: 0.4969  loss_bbox: 0.8088
2023/06/07 01:05:38 - mmengine - INFO - Epoch(train)   [4][ 7/21]  lr: 2.7631e-04  eta: 5:49:31  time: 4.9749  data_time: 0.2344  loss: 1.3309  loss_cls: 0.5103  loss_bbox: 0.8205
2023/06/07 01:05:43 - mmengine - INFO - Epoch(train)   [4][ 8/21]  lr: 2.8032e-04  eta: 5:49:25  time: 5.0041  data_time: 0.2345  loss: 1.3480  loss_cls: 0.5220  loss_bbox: 0.8260
2023/06/07 01:05:48 - mmengine - INFO - Epoch(train)   [4][ 9/21]  lr: 2.8432e-04  eta: 5:49:19  time: 4.9482  data_time: 0.1741  loss: 1.3804  loss_cls: 0.5360  loss_bbox: 0.8443
2023/06/07 01:05:53 - mmengine - INFO - Epoch(train)   [4][10/21]  lr: 2.8833e-04  eta: 5:49:10  time: 4.9667  data_time: 0.1732  loss: 1.4018  loss_cls: 0.5469  loss_bbox: 0.8550
2023/06/07 01:05:58 - mmengine - INFO - Epoch(train)   [4][11/21]  lr: 2.9233e-04  eta: 5:49:08  time: 4.9911  data_time: 0.1721  loss: 1.4194  loss_cls: 0.5555  loss_bbox: 0.8639
2023/06/07 01:06:03 - mmengine - INFO - Epoch(train)   [4][12/21]  lr: 2.9633e-04  eta: 5:48:58  time: 5.0116  data_time: 0.1715  loss: 1.4242  loss_cls: 0.5687  loss_bbox: 0.8555
2023/06/07 01:06:08 - mmengine - INFO - Epoch(train)   [4][13/21]  lr: 3.0034e-04  eta: 5:48:56  time: 5.0363  data_time: 0.1702  loss: 1.4546  loss_cls: 0.5832  loss_bbox: 0.8714
2023/06/07 01:06:13 - mmengine - INFO - Epoch(train)   [4][14/21]  lr: 3.0434e-04  eta: 5:48:39  time: 5.0566  data_time: 0.1702  loss: 1.4760  loss_cls: 0.5932  loss_bbox: 0.8828
2023/06/07 01:06:18 - mmengine - INFO - Epoch(train)   [4][15/21]  lr: 3.0835e-04  eta: 5:48:26  time: 5.0768  data_time: 0.1705  loss: 1.4796  loss_cls: 0.6030  loss_bbox: 0.8766
2023/06/07 01:06:23 - mmengine - INFO - Epoch(train)   [4][16/21]  lr: 3.1235e-04  eta: 5:48:10  time: 5.0746  data_time: 0.1692  loss: 1.4647  loss_cls: 0.5989  loss_bbox: 0.8658
2023/06/07 01:06:28 - mmengine - INFO - Epoch(train)   [4][17/21]  lr: 3.1635e-04  eta: 5:47:57  time: 5.0692  data_time: 0.1695  loss: 1.4819  loss_cls: 0.6031  loss_bbox: 0.8788
2023/06/07 01:06:33 - mmengine - INFO - Epoch(train)   [4][18/21]  lr: 3.2036e-04  eta: 5:47:43  time: 5.0717  data_time: 0.1695  loss: 1.5021  loss_cls: 0.6092  loss_bbox: 0.8929
2023/06/07 01:06:37 - mmengine - INFO - Epoch(train)   [4][19/21]  lr: 3.2436e-04  eta: 5:47:29  time: 5.0907  data_time: 0.1698  loss: 1.4913  loss_cls: 0.6043  loss_bbox: 0.8870
2023/06/07 01:06:41 - mmengine - INFO - Epoch(train)   [4][20/21]  lr: 3.2837e-04  eta: 5:46:13  time: 5.0645  data_time: 0.1711  loss: 1.4758  loss_cls: 0.5989  loss_bbox: 0.8769
2023/06/07 01:06:45 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:06:45 - mmengine - INFO - Epoch(train)   [4][21/21]  lr: 3.3237e-04  eta: 5:44:55  time: 5.0306  data_time: 0.1714  loss: 1.4802  loss_cls: 0.6138  loss_bbox: 0.8663
2023/06/07 01:06:52 - mmengine - INFO - Epoch(train)   [5][ 1/21]  lr: 3.3637e-04  eta: 5:46:47  time: 5.0792  data_time: 0.2275  loss: 1.4754  loss_cls: 0.6075  loss_bbox: 0.8679
2023/06/07 01:06:56 - mmengine - INFO - Epoch(train)   [5][ 2/21]  lr: 3.4038e-04  eta: 5:45:56  time: 5.0620  data_time: 0.2274  loss: 1.4882  loss_cls: 0.6231  loss_bbox: 0.8651
2023/06/07 01:07:00 - mmengine - INFO - Epoch(train)   [5][ 3/21]  lr: 3.4438e-04  eta: 5:44:52  time: 5.0399  data_time: 0.2274  loss: 1.4803  loss_cls: 0.6225  loss_bbox: 0.8578
2023/06/07 01:07:04 - mmengine - INFO - Epoch(train)   [5][ 4/21]  lr: 3.4838e-04  eta: 5:43:51  time: 5.0189  data_time: 0.2287  loss: 1.5057  loss_cls: 0.6328  loss_bbox: 0.8729
2023/06/07 01:07:08 - mmengine - INFO - Epoch(train)   [5][ 5/21]  lr: 3.5239e-04  eta: 5:42:55  time: 4.9990  data_time: 0.2299  loss: 1.5149  loss_cls: 0.6453  loss_bbox: 0.8696
2023/06/07 01:07:12 - mmengine - INFO - Epoch(train)   [5][ 6/21]  lr: 3.5639e-04  eta: 5:41:55  time: 4.9763  data_time: 0.2286  loss: 1.5159  loss_cls: 0.6503  loss_bbox: 0.8655
2023/06/07 01:07:15 - mmengine - INFO - Epoch(train)   [5][ 7/21]  lr: 3.6040e-04  eta: 5:41:00  time: 4.9576  data_time: 0.2289  loss: 1.5158  loss_cls: 0.6541  loss_bbox: 0.8617
2023/06/07 01:07:20 - mmengine - INFO - Epoch(train)   [5][ 8/21]  lr: 3.6440e-04  eta: 5:40:49  time: 4.9561  data_time: 0.2279  loss: 1.5261  loss_cls: 0.6616  loss_bbox: 0.8645
2023/06/07 01:07:25 - mmengine - INFO - Epoch(train)   [5][ 9/21]  lr: 3.6840e-04  eta: 5:40:55  time: 4.8608  data_time: 0.1471  loss: 1.5288  loss_cls: 0.6669  loss_bbox: 0.8619
2023/06/07 01:07:31 - mmengine - INFO - Epoch(train)   [5][10/21]  lr: 3.7241e-04  eta: 5:40:59  time: 4.8575  data_time: 0.1468  loss: 1.5337  loss_cls: 0.6747  loss_bbox: 0.8591
2023/06/07 01:07:35 - mmengine - INFO - Epoch(train)   [5][11/21]  lr: 3.7641e-04  eta: 5:40:45  time: 4.8500  data_time: 0.1471  loss: 1.5239  loss_cls: 0.6780  loss_bbox: 0.8459
2023/06/07 01:07:39 - mmengine - INFO - Epoch(train)   [5][12/21]  lr: 3.8042e-04  eta: 5:39:51  time: 4.8261  data_time: 0.1471  loss: 1.4647  loss_cls: 0.6256  loss_bbox: 0.8391
2023/06/07 01:07:43 - mmengine - INFO - Epoch(train)   [5][13/21]  lr: 3.8442e-04  eta: 5:38:58  time: 4.7993  data_time: 0.1455  loss: 1.4649  loss_cls: 0.6270  loss_bbox: 0.8379
2023/06/07 01:07:47 - mmengine - INFO - Epoch(train)   [5][14/21]  lr: 3.8842e-04  eta: 5:38:16  time: 4.7760  data_time: 0.1452  loss: 1.4683  loss_cls: 0.6268  loss_bbox: 0.8416
2023/06/07 01:07:52 - mmengine - INFO - Epoch(train)   [5][15/21]  lr: 3.9243e-04  eta: 5:38:07  time: 4.7646  data_time: 0.1438  loss: 1.4744  loss_cls: 0.6378  loss_bbox: 0.8366
2023/06/07 01:07:57 - mmengine - INFO - Epoch(train)   [5][16/21]  lr: 3.9643e-04  eta: 5:38:06  time: 4.7637  data_time: 0.1453  loss: 1.4770  loss_cls: 0.6471  loss_bbox: 0.8299
2023/06/07 01:08:02 - mmengine - INFO - Epoch(train)   [5][17/21]  lr: 4.0044e-04  eta: 5:38:01  time: 4.7596  data_time: 0.1451  loss: 1.4738  loss_cls: 0.6459  loss_bbox: 0.8279
2023/06/07 01:08:07 - mmengine - INFO - Epoch(train)   [5][18/21]  lr: 4.0444e-04  eta: 5:37:54  time: 4.7545  data_time: 0.1447  loss: 1.4810  loss_cls: 0.6496  loss_bbox: 0.8314
2023/06/07 01:08:12 - mmengine - INFO - Epoch(train)   [5][19/21]  lr: 4.0844e-04  eta: 5:37:51  time: 4.7509  data_time: 0.1460  loss: 1.4785  loss_cls: 0.6493  loss_bbox: 0.8292
2023/06/07 01:08:17 - mmengine - INFO - Epoch(train)   [5][20/21]  lr: 4.1245e-04  eta: 5:37:47  time: 4.7482  data_time: 0.1457  loss: 1.4789  loss_cls: 0.6502  loss_bbox: 0.8287
2023/06/07 01:08:22 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:08:22 - mmengine - INFO - Epoch(train)   [5][21/21]  lr: 4.1645e-04  eta: 5:37:42  time: 4.7443  data_time: 0.1444  loss: 1.4745  loss_cls: 0.6461  loss_bbox: 0.8284
2023/06/07 01:08:29 - mmengine - INFO - Epoch(val)   [5][ 1/11]    eta: 0:01:07  time: 6.7705  data_time: 5.5333  
2023/06/07 01:08:30 - mmengine - INFO - Epoch(val)   [5][ 2/11]    eta: 0:00:34  time: 3.8654  data_time: 2.7667  
2023/06/07 01:08:31 - mmengine - INFO - Epoch(val)   [5][ 3/11]    eta: 0:00:23  time: 2.8923  data_time: 1.8444  
2023/06/07 01:08:32 - mmengine - INFO - Epoch(val)   [5][ 4/11]    eta: 0:00:16  time: 2.3958  data_time: 1.3833  
2023/06/07 01:08:32 - mmengine - INFO - Epoch(val)   [5][ 5/11]    eta: 0:00:12  time: 2.1007  data_time: 1.1081  
2023/06/07 01:08:33 - mmengine - INFO - Epoch(val)   [5][ 6/11]    eta: 0:00:09  time: 1.9041  data_time: 0.9234  
2023/06/07 01:08:34 - mmengine - INFO - Epoch(val)   [5][ 7/11]    eta: 0:00:07  time: 1.7692  data_time: 0.7915  
2023/06/07 01:08:35 - mmengine - INFO - Epoch(val)   [5][ 8/11]    eta: 0:00:04  time: 1.6602  data_time: 0.6925  
2023/06/07 01:08:36 - mmengine - INFO - Epoch(val)   [5][ 9/11]    eta: 0:00:03  time: 1.5734  data_time: 0.6173  
2023/06/07 01:08:37 - mmengine - INFO - Epoch(val)   [5][10/11]    eta: 0:00:01  time: 1.5043  data_time: 0.5556  
2023/06/07 01:08:37 - mmengine - INFO - Epoch(val)   [5][11/11]    eta: 0:00:00  time: 1.4119  data_time: 0.5051  
2023/06/07 01:08:38 - mmengine - INFO - Evaluating bbox...
2023/06/07 01:08:39 - mmengine - INFO - bbox_mAP_copypaste: 0.043 0.133 0.023 -1.000 -1.000 0.043
2023/06/07 01:08:39 - mmengine - INFO - Epoch(val) [5][11/11]  coco/bbox_mAP: 0.0430  coco/bbox_mAP_50: 0.1330  coco/bbox_mAP_75: 0.0230  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.0430  data_time: 0.5051  time: 1.4119
2023/06/07 01:08:41 - mmengine - INFO - The best checkpoint with 0.0430 coco/bbox_mAP at 5 epoch is saved to best_coco/bbox_mAP_epoch_5.pth.
2023/06/07 01:08:50 - mmengine - INFO - Epoch(train)   [6][ 1/21]  lr: 4.2046e-04  eta: 5:40:45  time: 4.8431  data_time: 0.2186  loss: 1.4698  loss_cls: 0.6436  loss_bbox: 0.8262
2023/06/07 01:08:56 - mmengine - INFO - Epoch(train)   [6][ 2/21]  lr: 4.2446e-04  eta: 5:40:56  time: 4.8538  data_time: 0.2190  loss: 1.4640  loss_cls: 0.6367  loss_bbox: 0.8273
2023/06/07 01:09:01 - mmengine - INFO - Epoch(train)   [6][ 3/21]  lr: 4.2846e-04  eta: 5:40:53  time: 4.8568  data_time: 0.2193  loss: 1.4585  loss_cls: 0.6321  loss_bbox: 0.8265
2023/06/07 01:09:06 - mmengine - INFO - Epoch(train)   [6][ 4/21]  lr: 4.3247e-04  eta: 5:40:52  time: 4.8611  data_time: 0.2191  loss: 1.4543  loss_cls: 0.6307  loss_bbox: 0.8237
2023/06/07 01:09:11 - mmengine - INFO - Epoch(train)   [6][ 5/21]  lr: 4.3647e-04  eta: 5:40:51  time: 4.8649  data_time: 0.2191  loss: 1.4416  loss_cls: 0.6313  loss_bbox: 0.8104
2023/06/07 01:09:16 - mmengine - INFO - Epoch(train)   [6][ 6/21]  lr: 4.4048e-04  eta: 5:40:49  time: 4.8684  data_time: 0.2201  loss: 1.4346  loss_cls: 0.6291  loss_bbox: 0.8055
2023/06/07 01:09:21 - mmengine - INFO - Epoch(train)   [6][ 7/21]  lr: 4.4448e-04  eta: 5:40:49  time: 4.8910  data_time: 0.2203  loss: 1.4348  loss_cls: 0.6275  loss_bbox: 0.8073
2023/06/07 01:09:26 - mmengine - INFO - Epoch(train)   [6][ 8/21]  lr: 4.4848e-04  eta: 5:40:45  time: 4.9179  data_time: 0.2204  loss: 1.4333  loss_cls: 0.6229  loss_bbox: 0.8104
2023/06/07 01:09:31 - mmengine - INFO - Epoch(train)   [6][ 9/21]  lr: 4.5249e-04  eta: 5:40:42  time: 4.8658  data_time: 0.1678  loss: 1.4249  loss_cls: 0.6182  loss_bbox: 0.8067
2023/06/07 01:09:37 - mmengine - INFO - Epoch(train)   [6][10/21]  lr: 4.5649e-04  eta: 5:40:40  time: 4.8823  data_time: 0.1678  loss: 1.4207  loss_cls: 0.6140  loss_bbox: 0.8067
2023/06/07 01:09:42 - mmengine - INFO - Epoch(train)   [6][11/21]  lr: 4.6050e-04  eta: 5:40:38  time: 4.9053  data_time: 0.1680  loss: 1.4150  loss_cls: 0.6115  loss_bbox: 0.8035
2023/06/07 01:09:47 - mmengine - INFO - Epoch(train)   [6][12/21]  lr: 4.6450e-04  eta: 5:40:32  time: 4.9114  data_time: 0.1680  loss: 1.4139  loss_cls: 0.6097  loss_bbox: 0.8043
2023/06/07 01:09:52 - mmengine - INFO - Epoch(train)   [6][13/21]  lr: 4.6850e-04  eta: 5:40:34  time: 4.9119  data_time: 0.1681  loss: 1.4061  loss_cls: 0.6088  loss_bbox: 0.7973
2023/06/07 01:09:57 - mmengine - INFO - Epoch(train)   [6][14/21]  lr: 4.7251e-04  eta: 5:40:27  time: 4.9076  data_time: 0.1678  loss: 1.4047  loss_cls: 0.6129  loss_bbox: 0.7917
2023/06/07 01:10:02 - mmengine - INFO - Epoch(train)   [6][15/21]  lr: 4.7651e-04  eta: 5:40:20  time: 4.9029  data_time: 0.1665  loss: 1.4070  loss_cls: 0.6126  loss_bbox: 0.7944
2023/06/07 01:10:07 - mmengine - INFO - Epoch(train)   [6][16/21]  lr: 4.8052e-04  eta: 5:40:12  time: 4.9002  data_time: 0.1666  loss: 1.4019  loss_cls: 0.6079  loss_bbox: 0.7939
2023/06/07 01:10:12 - mmengine - INFO - Epoch(train)   [6][17/21]  lr: 4.8452e-04  eta: 5:40:03  time: 4.8971  data_time: 0.1667  loss: 1.3905  loss_cls: 0.6024  loss_bbox: 0.7881
2023/06/07 01:10:16 - mmengine - INFO - Epoch(train)   [6][18/21]  lr: 4.8852e-04  eta: 5:39:50  time: 4.8917  data_time: 0.1668  loss: 1.3851  loss_cls: 0.6012  loss_bbox: 0.7839
2023/06/07 01:10:21 - mmengine - INFO - Epoch(train)   [6][19/21]  lr: 4.9253e-04  eta: 5:39:47  time: 4.8899  data_time: 0.1669  loss: 1.3843  loss_cls: 0.6023  loss_bbox: 0.7820
2023/06/07 01:10:26 - mmengine - INFO - Epoch(train)   [6][20/21]  lr: 4.9653e-04  eta: 5:39:38  time: 4.8881  data_time: 0.1668  loss: 1.3840  loss_cls: 0.5958  loss_bbox: 0.7882
2023/06/07 01:10:31 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:10:31 - mmengine - INFO - Epoch(train)   [6][21/21]  lr: 5.0054e-04  eta: 5:39:30  time: 4.8836  data_time: 0.1670  loss: 1.3746  loss_cls: 0.5883  loss_bbox: 0.7863
2023/06/07 01:10:41 - mmengine - INFO - Epoch(train)   [7][ 1/21]  lr: 5.0454e-04  eta: 5:42:15  time: 4.9926  data_time: 0.2567  loss: 1.3755  loss_cls: 0.5899  loss_bbox: 0.7856
2023/06/07 01:10:47 - mmengine - INFO - Epoch(train)   [7][ 2/21]  lr: 5.0854e-04  eta: 5:42:19  time: 5.0009  data_time: 0.2567  loss: 1.3758  loss_cls: 0.5864  loss_bbox: 0.7894
2023/06/07 01:10:52 - mmengine - INFO - Epoch(train)   [7][ 3/21]  lr: 5.1255e-04  eta: 5:42:18  time: 5.0070  data_time: 0.2583  loss: 1.3740  loss_cls: 0.5822  loss_bbox: 0.7918
2023/06/07 01:10:57 - mmengine - INFO - Epoch(train)   [7][ 4/21]  lr: 5.1655e-04  eta: 5:42:14  time: 5.0104  data_time: 0.2581  loss: 1.3666  loss_cls: 0.5821  loss_bbox: 0.7845
2023/06/07 01:11:02 - mmengine - INFO - Epoch(train)   [7][ 5/21]  lr: 5.2056e-04  eta: 5:42:14  time: 5.0164  data_time: 0.2595  loss: 1.3589  loss_cls: 0.5820  loss_bbox: 0.7769
2023/06/07 01:11:07 - mmengine - INFO - Epoch(train)   [7][ 6/21]  lr: 5.2456e-04  eta: 5:42:12  time: 5.0217  data_time: 0.2598  loss: 1.3539  loss_cls: 0.5799  loss_bbox: 0.7740
2023/06/07 01:11:13 - mmengine - INFO - Epoch(train)   [7][ 7/21]  lr: 5.2856e-04  eta: 5:42:12  time: 5.0533  data_time: 0.2600  loss: 1.3574  loss_cls: 0.5787  loss_bbox: 0.7786
2023/06/07 01:11:18 - mmengine - INFO - Epoch(train)   [7][ 8/21]  lr: 5.3257e-04  eta: 5:42:11  time: 5.0858  data_time: 0.2614  loss: 1.3372  loss_cls: 0.5572  loss_bbox: 0.7800
2023/06/07 01:11:23 - mmengine - INFO - Epoch(train)   [7][ 9/21]  lr: 5.3657e-04  eta: 5:42:12  time: 5.0422  data_time: 0.2065  loss: 1.3281  loss_cls: 0.5546  loss_bbox: 0.7735
2023/06/07 01:11:28 - mmengine - INFO - Epoch(train)   [7][10/21]  lr: 5.4058e-04  eta: 5:42:10  time: 5.0631  data_time: 0.2079  loss: 1.3193  loss_cls: 0.5452  loss_bbox: 0.7741
2023/06/07 01:11:33 - mmengine - INFO - Epoch(train)   [7][11/21]  lr: 5.4458e-04  eta: 5:42:08  time: 5.0899  data_time: 0.2082  loss: 1.3171  loss_cls: 0.5423  loss_bbox: 0.7747
2023/06/07 01:11:38 - mmengine - INFO - Epoch(train)   [7][12/21]  lr: 5.4858e-04  eta: 5:42:04  time: 5.1149  data_time: 0.2072  loss: 1.3205  loss_cls: 0.5505  loss_bbox: 0.7700
2023/06/07 01:11:44 - mmengine - INFO - Epoch(train)   [7][13/21]  lr: 5.5259e-04  eta: 5:42:02  time: 5.1398  data_time: 0.2076  loss: 1.3157  loss_cls: 0.5467  loss_bbox: 0.7690
2023/06/07 01:11:49 - mmengine - INFO - Epoch(train)   [7][14/21]  lr: 5.5659e-04  eta: 5:41:55  time: 5.1640  data_time: 0.2078  loss: 1.3129  loss_cls: 0.5450  loss_bbox: 0.7679
2023/06/07 01:11:54 - mmengine - INFO - Epoch(train)   [7][15/21]  lr: 5.6059e-04  eta: 5:41:46  time: 5.1844  data_time: 0.2077  loss: 1.3069  loss_cls: 0.5385  loss_bbox: 0.7684
2023/06/07 01:11:58 - mmengine - INFO - Epoch(train)   [7][16/21]  lr: 5.6460e-04  eta: 5:41:37  time: 5.1861  data_time: 0.2075  loss: 1.3012  loss_cls: 0.5342  loss_bbox: 0.7670
2023/06/07 01:12:03 - mmengine - INFO - Epoch(train)   [7][17/21]  lr: 5.6860e-04  eta: 5:41:30  time: 5.1810  data_time: 0.2060  loss: 1.2985  loss_cls: 0.5329  loss_bbox: 0.7656
2023/06/07 01:12:08 - mmengine - INFO - Epoch(train)   [7][18/21]  lr: 5.7261e-04  eta: 5:41:25  time: 5.1780  data_time: 0.2062  loss: 1.2940  loss_cls: 0.5321  loss_bbox: 0.7620
2023/06/07 01:12:13 - mmengine - INFO - Epoch(train)   [7][19/21]  lr: 5.7661e-04  eta: 5:41:17  time: 5.1814  data_time: 0.2061  loss: 1.2914  loss_cls: 0.5279  loss_bbox: 0.7635
2023/06/07 01:12:18 - mmengine - INFO - Epoch(train)   [7][20/21]  lr: 5.8061e-04  eta: 5:41:09  time: 5.2038  data_time: 0.2062  loss: 1.2904  loss_cls: 0.5222  loss_bbox: 0.7682
2023/06/07 01:12:23 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:12:23 - mmengine - INFO - Epoch(train)   [7][21/21]  lr: 5.8462e-04  eta: 5:41:03  time: 5.2276  data_time: 0.2062  loss: 1.2826  loss_cls: 0.5169  loss_bbox: 0.7657
2023/06/07 01:12:34 - mmengine - INFO - Epoch(train)   [8][ 1/21]  lr: 5.8862e-04  eta: 5:43:25  time: 5.3544  data_time: 0.2949  loss: 1.2840  loss_cls: 0.5182  loss_bbox: 0.7658
2023/06/07 01:12:39 - mmengine - INFO - Epoch(train)   [8][ 2/21]  lr: 5.9263e-04  eta: 5:43:30  time: 5.3664  data_time: 0.2962  loss: 1.2759  loss_cls: 0.5099  loss_bbox: 0.7660
2023/06/07 01:12:44 - mmengine - INFO - Epoch(train)   [8][ 3/21]  lr: 5.9663e-04  eta: 5:43:28  time: 5.3696  data_time: 0.2961  loss: 1.2663  loss_cls: 0.5042  loss_bbox: 0.7621
2023/06/07 01:12:50 - mmengine - INFO - Epoch(train)   [8][ 4/21]  lr: 6.0063e-04  eta: 5:43:23  time: 5.3727  data_time: 0.2959  loss: 1.2635  loss_cls: 0.5012  loss_bbox: 0.7623
2023/06/07 01:12:55 - mmengine - INFO - Epoch(train)   [8][ 5/21]  lr: 6.0464e-04  eta: 5:43:19  time: 5.3774  data_time: 0.2965  loss: 1.2502  loss_cls: 0.4923  loss_bbox: 0.7578
2023/06/07 01:13:00 - mmengine - INFO - Epoch(train)   [8][ 6/21]  lr: 6.0864e-04  eta: 5:43:14  time: 5.3795  data_time: 0.2954  loss: 1.2452  loss_cls: 0.4885  loss_bbox: 0.7568
2023/06/07 01:13:05 - mmengine - INFO - Epoch(train)   [8][ 7/21]  lr: 6.1265e-04  eta: 5:43:10  time: 5.3828  data_time: 0.2956  loss: 1.2394  loss_cls: 0.4857  loss_bbox: 0.7538
2023/06/07 01:13:10 - mmengine - INFO - Epoch(train)   [8][ 8/21]  lr: 6.1665e-04  eta: 5:43:06  time: 5.3865  data_time: 0.2954  loss: 1.2360  loss_cls: 0.4819  loss_bbox: 0.7540
2023/06/07 01:13:15 - mmengine - INFO - Epoch(train)   [8][ 9/21]  lr: 6.2065e-04  eta: 5:43:02  time: 5.2927  data_time: 0.2213  loss: 1.2317  loss_cls: 0.4815  loss_bbox: 0.7503
2023/06/07 01:13:20 - mmengine - INFO - Epoch(train)   [8][10/21]  lr: 6.2466e-04  eta: 5:42:59  time: 5.2870  data_time: 0.2211  loss: 1.2305  loss_cls: 0.4837  loss_bbox: 0.7468
2023/06/07 01:13:25 - mmengine - INFO - Epoch(train)   [8][11/21]  lr: 6.2866e-04  eta: 5:42:53  time: 5.2871  data_time: 0.2209  loss: 1.2362  loss_cls: 0.4852  loss_bbox: 0.7510
2023/06/07 01:13:31 - mmengine - INFO - Epoch(train)   [8][12/21]  lr: 6.3267e-04  eta: 5:42:49  time: 5.2885  data_time: 0.2210  loss: 1.2339  loss_cls: 0.4835  loss_bbox: 0.7504
2023/06/07 01:13:36 - mmengine - INFO - Epoch(train)   [8][13/21]  lr: 6.3667e-04  eta: 5:42:44  time: 5.2880  data_time: 0.2214  loss: 1.2336  loss_cls: 0.4845  loss_bbox: 0.7491
2023/06/07 01:13:40 - mmengine - INFO - Epoch(train)   [8][14/21]  lr: 6.4067e-04  eta: 5:42:33  time: 5.2836  data_time: 0.2204  loss: 1.2327  loss_cls: 0.4853  loss_bbox: 0.7474
2023/06/07 01:13:45 - mmengine - INFO - Epoch(train)   [8][15/21]  lr: 6.4468e-04  eta: 5:42:25  time: 5.2798  data_time: 0.2203  loss: 1.2230  loss_cls: 0.4828  loss_bbox: 0.7402
2023/06/07 01:13:50 - mmengine - INFO - Epoch(train)   [8][16/21]  lr: 6.4868e-04  eta: 5:42:15  time: 5.2774  data_time: 0.2203  loss: 1.2178  loss_cls: 0.4832  loss_bbox: 0.7346
2023/06/07 01:13:55 - mmengine - INFO - Epoch(train)   [8][17/21]  lr: 6.5269e-04  eta: 5:42:06  time: 5.2750  data_time: 0.2195  loss: 1.2203  loss_cls: 0.4847  loss_bbox: 0.7356
2023/06/07 01:14:00 - mmengine - INFO - Epoch(train)   [8][18/21]  lr: 6.5669e-04  eta: 5:41:58  time: 5.2724  data_time: 0.2185  loss: 1.2151  loss_cls: 0.4802  loss_bbox: 0.7349
2023/06/07 01:14:05 - mmengine - INFO - Epoch(train)   [8][19/21]  lr: 6.6069e-04  eta: 5:41:49  time: 5.2690  data_time: 0.2181  loss: 1.2052  loss_cls: 0.4733  loss_bbox: 0.7319
2023/06/07 01:14:10 - mmengine - INFO - Epoch(train)   [8][20/21]  lr: 6.6470e-04  eta: 5:41:40  time: 5.2680  data_time: 0.2179  loss: 1.2027  loss_cls: 0.4734  loss_bbox: 0.7293
2023/06/07 01:14:15 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:14:15 - mmengine - INFO - Epoch(train)   [8][21/21]  lr: 6.6870e-04  eta: 5:41:31  time: 5.2623  data_time: 0.2163  loss: 1.2031  loss_cls: 0.4739  loss_bbox: 0.7291
2023/06/07 01:14:25 - mmengine - INFO - Epoch(train)   [9][ 1/21]  lr: 6.7271e-04  eta: 5:43:22  time: 5.3616  data_time: 0.2958  loss: 1.1997  loss_cls: 0.4684  loss_bbox: 0.7314
2023/06/07 01:14:30 - mmengine - INFO - Epoch(train)   [9][ 2/21]  lr: 6.7671e-04  eta: 5:43:15  time: 5.3643  data_time: 0.2958  loss: 1.1898  loss_cls: 0.4616  loss_bbox: 0.7282
2023/06/07 01:14:34 - mmengine - INFO - Epoch(train)   [9][ 3/21]  lr: 6.8071e-04  eta: 5:42:42  time: 5.3440  data_time: 0.2957  loss: 1.1895  loss_cls: 0.4597  loss_bbox: 0.7298
2023/06/07 01:14:38 - mmengine - INFO - Epoch(train)   [9][ 4/21]  lr: 6.8472e-04  eta: 5:42:08  time: 5.3238  data_time: 0.2956  loss: 1.1855  loss_cls: 0.4566  loss_bbox: 0.7289
2023/06/07 01:14:42 - mmengine - INFO - Epoch(train)   [9][ 5/21]  lr: 6.8872e-04  eta: 5:41:37  time: 5.3080  data_time: 0.2958  loss: 1.1880  loss_cls: 0.4521  loss_bbox: 0.7358
2023/06/07 01:14:46 - mmengine - INFO - Epoch(train)   [9][ 6/21]  lr: 6.9273e-04  eta: 5:41:02  time: 5.2832  data_time: 0.2956  loss: 1.1839  loss_cls: 0.4505  loss_bbox: 0.7335
2023/06/07 01:14:51 - mmengine - INFO - Epoch(train)   [9][ 7/21]  lr: 6.9673e-04  eta: 5:40:54  time: 5.2842  data_time: 0.2953  loss: 1.1758  loss_cls: 0.4488  loss_bbox: 0.7271
2023/06/07 01:14:56 - mmengine - INFO - Epoch(train)   [9][ 8/21]  lr: 7.0073e-04  eta: 5:40:51  time: 5.2896  data_time: 0.2966  loss: 1.1715  loss_cls: 0.4465  loss_bbox: 0.7250
2023/06/07 01:15:01 - mmengine - INFO - Epoch(train)   [9][ 9/21]  lr: 7.0474e-04  eta: 5:40:47  time: 5.1860  data_time: 0.2074  loss: 1.1735  loss_cls: 0.4455  loss_bbox: 0.7281
2023/06/07 01:15:06 - mmengine - INFO - Epoch(train)   [9][10/21]  lr: 7.0874e-04  eta: 5:40:42  time: 5.1812  data_time: 0.2072  loss: 1.1716  loss_cls: 0.4462  loss_bbox: 0.7254
2023/06/07 01:15:11 - mmengine - INFO - Epoch(train)   [9][11/21]  lr: 7.1275e-04  eta: 5:40:39  time: 5.1814  data_time: 0.2069  loss: 1.1744  loss_cls: 0.4496  loss_bbox: 0.7248
2023/06/07 01:15:16 - mmengine - INFO - Epoch(train)   [9][12/21]  lr: 7.1675e-04  eta: 5:40:37  time: 5.1838  data_time: 0.2068  loss: 1.1744  loss_cls: 0.4510  loss_bbox: 0.7234
2023/06/07 01:15:21 - mmengine - INFO - Epoch(train)   [9][13/21]  lr: 7.2075e-04  eta: 5:40:30  time: 5.1804  data_time: 0.2054  loss: 1.1742  loss_cls: 0.4529  loss_bbox: 0.7213
2023/06/07 01:15:26 - mmengine - INFO - Epoch(train)   [9][14/21]  lr: 7.2476e-04  eta: 5:40:23  time: 5.1769  data_time: 0.2063  loss: 1.1772  loss_cls: 0.4548  loss_bbox: 0.7224
2023/06/07 01:15:31 - mmengine - INFO - Epoch(train)   [9][15/21]  lr: 7.2876e-04  eta: 5:40:14  time: 5.1709  data_time: 0.2049  loss: 1.1745  loss_cls: 0.4545  loss_bbox: 0.7201
2023/06/07 01:15:36 - mmengine - INFO - Epoch(train)   [9][16/21]  lr: 7.3277e-04  eta: 5:40:05  time: 5.1654  data_time: 0.2036  loss: 1.1725  loss_cls: 0.4549  loss_bbox: 0.7176
2023/06/07 01:15:41 - mmengine - INFO - Epoch(train)   [9][17/21]  lr: 7.3677e-04  eta: 5:39:57  time: 5.1587  data_time: 0.2023  loss: 1.1735  loss_cls: 0.4565  loss_bbox: 0.7170
2023/06/07 01:15:46 - mmengine - INFO - Epoch(train)   [9][18/21]  lr: 7.4077e-04  eta: 5:39:48  time: 5.1542  data_time: 0.2009  loss: 1.1766  loss_cls: 0.4583  loss_bbox: 0.7183
2023/06/07 01:15:51 - mmengine - INFO - Epoch(train)   [9][19/21]  lr: 7.4478e-04  eta: 5:39:41  time: 5.1507  data_time: 0.2008  loss: 1.1755  loss_cls: 0.4575  loss_bbox: 0.7179
2023/06/07 01:15:56 - mmengine - INFO - Epoch(train)   [9][20/21]  lr: 7.4878e-04  eta: 5:39:34  time: 5.1492  data_time: 0.2007  loss: 1.1625  loss_cls: 0.4443  loss_bbox: 0.7181
2023/06/07 01:16:01 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:16:01 - mmengine - INFO - Epoch(train)   [9][21/21]  lr: 7.5279e-04  eta: 5:39:27  time: 5.1456  data_time: 0.2005  loss: 1.1554  loss_cls: 0.4389  loss_bbox: 0.7165
2023/06/07 01:16:11 - mmengine - INFO - Epoch(train)  [10][ 1/21]  lr: 7.5679e-04  eta: 5:40:58  time: 5.2381  data_time: 0.2782  loss: 1.1516  loss_cls: 0.4347  loss_bbox: 0.7169
2023/06/07 01:16:16 - mmengine - INFO - Epoch(train)  [10][ 2/21]  lr: 7.6079e-04  eta: 5:40:57  time: 5.2459  data_time: 0.2783  loss: 1.1477  loss_cls: 0.4345  loss_bbox: 0.7132
2023/06/07 01:16:21 - mmengine - INFO - Epoch(train)  [10][ 3/21]  lr: 7.6480e-04  eta: 5:40:52  time: 5.2495  data_time: 0.2782  loss: 1.1472  loss_cls: 0.4335  loss_bbox: 0.7137
2023/06/07 01:16:26 - mmengine - INFO - Epoch(train)  [10][ 4/21]  lr: 7.6880e-04  eta: 5:40:46  time: 5.2511  data_time: 0.2780  loss: 1.1406  loss_cls: 0.4295  loss_bbox: 0.7111
2023/06/07 01:16:31 - mmengine - INFO - Epoch(train)  [10][ 5/21]  lr: 7.7281e-04  eta: 5:40:43  time: 5.2542  data_time: 0.2794  loss: 1.1380  loss_cls: 0.4250  loss_bbox: 0.7130
2023/06/07 01:16:36 - mmengine - INFO - Epoch(train)  [10][ 6/21]  lr: 7.7681e-04  eta: 5:40:39  time: 5.2589  data_time: 0.2793  loss: 1.1326  loss_cls: 0.4207  loss_bbox: 0.7119
2023/06/07 01:16:42 - mmengine - INFO - Epoch(train)  [10][ 7/21]  lr: 7.8081e-04  eta: 5:40:34  time: 5.2618  data_time: 0.2792  loss: 1.1177  loss_cls: 0.4164  loss_bbox: 0.7013
2023/06/07 01:16:47 - mmengine - INFO - Epoch(train)  [10][ 8/21]  lr: 7.8482e-04  eta: 5:40:28  time: 5.2633  data_time: 0.2791  loss: 1.1120  loss_cls: 0.4133  loss_bbox: 0.6987
2023/06/07 01:16:52 - mmengine - INFO - Epoch(train)  [10][ 9/21]  lr: 7.8882e-04  eta: 5:40:24  time: 5.1580  data_time: 0.1908  loss: 1.1022  loss_cls: 0.4093  loss_bbox: 0.6929
2023/06/07 01:16:57 - mmengine - INFO - Epoch(train)  [10][10/21]  lr: 7.9282e-04  eta: 5:40:22  time: 5.1539  data_time: 0.1908  loss: 1.0986  loss_cls: 0.4086  loss_bbox: 0.6899
2023/06/07 01:17:02 - mmengine - INFO - Epoch(train)  [10][11/21]  lr: 7.9683e-04  eta: 5:40:16  time: 5.1516  data_time: 0.1895  loss: 1.0950  loss_cls: 0.4055  loss_bbox: 0.6895
2023/06/07 01:17:07 - mmengine - INFO - Epoch(train)  [10][12/21]  lr: 8.0083e-04  eta: 5:40:11  time: 5.1513  data_time: 0.1894  loss: 1.0905  loss_cls: 0.4031  loss_bbox: 0.6874
2023/06/07 01:17:12 - mmengine - INFO - Epoch(train)  [10][13/21]  lr: 8.0484e-04  eta: 5:40:07  time: 5.1519  data_time: 0.1904  loss: 1.0917  loss_cls: 0.4035  loss_bbox: 0.6882
2023/06/07 01:17:17 - mmengine - INFO - Epoch(train)  [10][14/21]  lr: 8.0884e-04  eta: 5:39:58  time: 5.1483  data_time: 0.1904  loss: 1.0848  loss_cls: 0.3961  loss_bbox: 0.6887
2023/06/07 01:17:22 - mmengine - INFO - Epoch(train)  [10][15/21]  lr: 8.1284e-04  eta: 5:39:50  time: 5.1442  data_time: 0.1903  loss: 1.0794  loss_cls: 0.3920  loss_bbox: 0.6874
2023/06/07 01:17:27 - mmengine - INFO - Epoch(train)  [10][16/21]  lr: 8.1685e-04  eta: 5:39:42  time: 5.1407  data_time: 0.1902  loss: 1.0779  loss_cls: 0.3931  loss_bbox: 0.6848
2023/06/07 01:17:32 - mmengine - INFO - Epoch(train)  [10][17/21]  lr: 8.2085e-04  eta: 5:39:35  time: 5.1380  data_time: 0.1902  loss: 1.0776  loss_cls: 0.3951  loss_bbox: 0.6825
2023/06/07 01:17:37 - mmengine - INFO - Epoch(train)  [10][18/21]  lr: 8.2486e-04  eta: 5:39:25  time: 5.1326  data_time: 0.1903  loss: 1.0752  loss_cls: 0.3926  loss_bbox: 0.6826
2023/06/07 01:17:42 - mmengine - INFO - Epoch(train)  [10][19/21]  lr: 8.2886e-04  eta: 5:39:16  time: 5.1292  data_time: 0.1904  loss: 1.0674  loss_cls: 0.3873  loss_bbox: 0.6801
2023/06/07 01:17:47 - mmengine - INFO - Epoch(train)  [10][20/21]  lr: 8.3286e-04  eta: 5:39:07  time: 5.1240  data_time: 0.1904  loss: 1.0632  loss_cls: 0.3844  loss_bbox: 0.6788
2023/06/07 01:17:52 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:17:52 - mmengine - INFO - Epoch(train)  [10][21/21]  lr: 8.3687e-04  eta: 5:38:58  time: 5.1201  data_time: 0.1902  loss: 1.0593  loss_cls: 0.3814  loss_bbox: 0.6779
2023/06/07 01:17:52 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/07 01:17:57 - mmengine - INFO - Epoch(val)  [10][ 1/11]    eta: 0:00:26  time: 1.5146  data_time: 0.5934  
2023/06/07 01:17:58 - mmengine - INFO - Epoch(val)  [10][ 2/11]    eta: 0:00:16  time: 1.4712  data_time: 0.5479  
2023/06/07 01:17:58 - mmengine - INFO - Epoch(val)  [10][ 3/11]    eta: 0:00:12  time: 1.4335  data_time: 0.5089  
2023/06/07 01:17:59 - mmengine - INFO - Epoch(val)  [10][ 4/11]    eta: 0:00:09  time: 1.4040  data_time: 0.4751  
2023/06/07 01:18:00 - mmengine - INFO - Epoch(val)  [10][ 5/11]    eta: 0:00:07  time: 1.3763  data_time: 0.4456  
2023/06/07 01:18:01 - mmengine - INFO - Epoch(val)  [10][ 6/11]    eta: 0:00:06  time: 1.3526  data_time: 0.4195  
2023/06/07 01:18:02 - mmengine - INFO - Epoch(val)  [10][ 7/11]    eta: 0:00:04  time: 1.3292  data_time: 0.3964  
2023/06/07 01:18:03 - mmengine - INFO - Epoch(val)  [10][ 8/11]    eta: 0:00:03  time: 1.3117  data_time: 0.3757  
2023/06/07 01:18:04 - mmengine - INFO - Epoch(val)  [10][ 9/11]    eta: 0:00:02  time: 1.2929  data_time: 0.3570  
2023/06/07 01:18:05 - mmengine - INFO - Epoch(val)  [10][10/11]    eta: 0:00:01  time: 1.2744  data_time: 0.3401  
2023/06/07 01:18:06 - mmengine - INFO - Epoch(val)  [10][11/11]    eta: 0:00:00  time: 1.2434  data_time: 0.3248  
2023/06/07 01:18:06 - mmengine - INFO - Evaluating bbox...
2023/06/07 01:18:06 - mmengine - INFO - bbox_mAP_copypaste: 0.257 0.519 0.218 -1.000 -1.000 0.257
2023/06/07 01:18:06 - mmengine - INFO - Epoch(val) [10][11/11]  coco/bbox_mAP: 0.2570  coco/bbox_mAP_50: 0.5190  coco/bbox_mAP_75: 0.2180  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.2570  data_time: 0.3248  time: 1.2434
2023/06/07 01:18:06 - mmengine - INFO - The previous best checkpoint C:\Users\liuya\mmdetection\work_dirs\rtmdet_tiny_ear\best_coco/bbox_mAP_epoch_5.pth is removed
2023/06/07 01:18:08 - mmengine - INFO - The best checkpoint with 0.2570 coco/bbox_mAP at 10 epoch is saved to best_coco/bbox_mAP_epoch_10.pth.
2023/06/07 01:18:18 - mmengine - INFO - Epoch(train)  [11][ 1/21]  lr: 8.4087e-04  eta: 5:40:30  time: 5.2275  data_time: 0.2785  loss: 1.0556  loss_cls: 0.3786  loss_bbox: 0.6770
2023/06/07 01:18:24 - mmengine - INFO - Epoch(train)  [11][ 2/21]  lr: 8.4488e-04  eta: 5:40:32  time: 5.2387  data_time: 0.2785  loss: 1.0569  loss_cls: 0.3798  loss_bbox: 0.6770
2023/06/07 01:18:29 - mmengine - INFO - Epoch(train)  [11][ 3/21]  lr: 8.4888e-04  eta: 5:40:29  time: 5.2449  data_time: 0.2799  loss: 1.0547  loss_cls: 0.3783  loss_bbox: 0.6764
2023/06/07 01:18:34 - mmengine - INFO - Epoch(train)  [11][ 4/21]  lr: 8.5288e-04  eta: 5:40:24  time: 5.2488  data_time: 0.2803  loss: 1.0497  loss_cls: 0.3741  loss_bbox: 0.6756
2023/06/07 01:18:39 - mmengine - INFO - Epoch(train)  [11][ 5/21]  lr: 8.5689e-04  eta: 5:40:19  time: 5.2531  data_time: 0.2804  loss: 1.0497  loss_cls: 0.3751  loss_bbox: 0.6746
2023/06/07 01:18:45 - mmengine - INFO - Epoch(train)  [11][ 6/21]  lr: 8.6089e-04  eta: 5:40:14  time: 5.2570  data_time: 0.2805  loss: 1.0490  loss_cls: 0.3742  loss_bbox: 0.6748
2023/06/07 01:18:50 - mmengine - INFO - Epoch(train)  [11][ 7/21]  lr: 8.6490e-04  eta: 5:40:08  time: 5.2596  data_time: 0.2807  loss: 1.0513  loss_cls: 0.3709  loss_bbox: 0.6803
2023/06/07 01:18:55 - mmengine - INFO - Epoch(train)  [11][ 8/21]  lr: 8.6890e-04  eta: 5:40:04  time: 5.2651  data_time: 0.2807  loss: 1.0475  loss_cls: 0.3693  loss_bbox: 0.6782
2023/06/07 01:19:00 - mmengine - INFO - Epoch(train)  [11][ 9/21]  lr: 8.7290e-04  eta: 5:40:00  time: 5.1707  data_time: 0.2049  loss: 1.0463  loss_cls: 0.3699  loss_bbox: 0.6764
2023/06/07 01:19:05 - mmengine - INFO - Epoch(train)  [11][10/21]  lr: 8.7691e-04  eta: 5:39:54  time: 5.1704  data_time: 0.2047  loss: 1.0465  loss_cls: 0.3685  loss_bbox: 0.6779
2023/06/07 01:19:10 - mmengine - INFO - Epoch(train)  [11][11/21]  lr: 8.8091e-04  eta: 5:39:48  time: 5.1945  data_time: 0.2048  loss: 1.0475  loss_cls: 0.3702  loss_bbox: 0.6773
2023/06/07 01:19:15 - mmengine - INFO - Epoch(train)  [11][12/21]  lr: 8.8492e-04  eta: 5:39:44  time: 5.2194  data_time: 0.2059  loss: 1.0497  loss_cls: 0.3712  loss_bbox: 0.6784
2023/06/07 01:19:20 - mmengine - INFO - Epoch(train)  [11][13/21]  lr: 8.8892e-04  eta: 5:39:39  time: 5.2428  data_time: 0.2060  loss: 1.0398  loss_cls: 0.3703  loss_bbox: 0.6695
2023/06/07 01:19:25 - mmengine - INFO - Epoch(train)  [11][14/21]  lr: 8.9292e-04  eta: 5:39:30  time: 5.2647  data_time: 0.2061  loss: 1.0407  loss_cls: 0.3723  loss_bbox: 0.6684
2023/06/07 01:19:30 - mmengine - INFO - Epoch(train)  [11][15/21]  lr: 8.9693e-04  eta: 5:39:20  time: 5.2636  data_time: 0.2063  loss: 1.0394  loss_cls: 0.3696  loss_bbox: 0.6698
2023/06/07 01:19:35 - mmengine - INFO - Epoch(train)  [11][16/21]  lr: 9.0093e-04  eta: 5:39:11  time: 5.2577  data_time: 0.2049  loss: 1.0386  loss_cls: 0.3695  loss_bbox: 0.6691
2023/06/07 01:19:40 - mmengine - INFO - Epoch(train)  [11][17/21]  lr: 9.0494e-04  eta: 5:39:02  time: 5.2533  data_time: 0.2048  loss: 1.0289  loss_cls: 0.3639  loss_bbox: 0.6650
2023/06/07 01:19:45 - mmengine - INFO - Epoch(train)  [11][18/21]  lr: 9.0894e-04  eta: 5:38:53  time: 5.2490  data_time: 0.2048  loss: 1.0286  loss_cls: 0.3626  loss_bbox: 0.6660
2023/06/07 01:19:50 - mmengine - INFO - Epoch(train)  [11][19/21]  lr: 9.1294e-04  eta: 5:38:44  time: 5.2436  data_time: 0.2036  loss: 1.0231  loss_cls: 0.3571  loss_bbox: 0.6661
2023/06/07 01:19:55 - mmengine - INFO - Epoch(train)  [11][20/21]  lr: 9.1695e-04  eta: 5:38:37  time: 5.2401  data_time: 0.2050  loss: 1.0156  loss_cls: 0.3536  loss_bbox: 0.6620
2023/06/07 01:20:00 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:20:00 - mmengine - INFO - Epoch(train)  [11][21/21]  lr: 9.2095e-04  eta: 5:38:29  time: 5.2379  data_time: 0.2049  loss: 1.0140  loss_cls: 0.3538  loss_bbox: 0.6601
2023/06/07 01:20:10 - mmengine - INFO - Epoch(train)  [12][ 1/21]  lr: 9.2496e-04  eta: 5:39:57  time: 5.3494  data_time: 0.2978  loss: 1.0154  loss_cls: 0.3559  loss_bbox: 0.6595
2023/06/07 01:20:16 - mmengine - INFO - Epoch(train)  [12][ 2/21]  lr: 9.2896e-04  eta: 5:39:52  time: 5.3549  data_time: 0.2980  loss: 1.0161  loss_cls: 0.3582  loss_bbox: 0.6579
2023/06/07 01:20:21 - mmengine - INFO - Epoch(train)  [12][ 3/21]  lr: 9.3296e-04  eta: 5:39:47  time: 5.3599  data_time: 0.2980  loss: 1.0139  loss_cls: 0.3566  loss_bbox: 0.6572
2023/06/07 01:20:26 - mmengine - INFO - Epoch(train)  [12][ 4/21]  lr: 9.3697e-04  eta: 5:39:41  time: 5.3631  data_time: 0.2977  loss: 1.0145  loss_cls: 0.3567  loss_bbox: 0.6578
2023/06/07 01:20:31 - mmengine - INFO - Epoch(train)  [12][ 5/21]  lr: 9.4097e-04  eta: 5:39:36  time: 5.3673  data_time: 0.2981  loss: 1.0137  loss_cls: 0.3566  loss_bbox: 0.6571
2023/06/07 01:20:36 - mmengine - INFO - Epoch(train)  [12][ 6/21]  lr: 9.4498e-04  eta: 5:39:32  time: 5.3719  data_time: 0.2982  loss: 1.0093  loss_cls: 0.3543  loss_bbox: 0.6550
2023/06/07 01:20:41 - mmengine - INFO - Epoch(train)  [12][ 7/21]  lr: 9.4898e-04  eta: 5:39:20  time: 5.3662  data_time: 0.2982  loss: 1.0082  loss_cls: 0.3526  loss_bbox: 0.6556
2023/06/07 01:20:45 - mmengine - INFO - Epoch(train)  [12][ 8/21]  lr: 9.5298e-04  eta: 5:38:53  time: 5.3431  data_time: 0.2968  loss: 1.0085  loss_cls: 0.3529  loss_bbox: 0.6556
2023/06/07 01:20:50 - mmengine - INFO - Epoch(train)  [12][ 9/21]  lr: 9.5699e-04  eta: 5:38:47  time: 5.2527  data_time: 0.2203  loss: 1.0112  loss_cls: 0.3558  loss_bbox: 0.6554
2023/06/07 01:20:55 - mmengine - INFO - Epoch(train)  [12][10/21]  lr: 9.6099e-04  eta: 5:38:42  time: 5.2488  data_time: 0.2201  loss: 1.0082  loss_cls: 0.3525  loss_bbox: 0.6558
2023/06/07 01:21:00 - mmengine - INFO - Epoch(train)  [12][11/21]  lr: 9.6500e-04  eta: 5:38:35  time: 5.2480  data_time: 0.2201  loss: 1.0055  loss_cls: 0.3512  loss_bbox: 0.6543
2023/06/07 01:21:05 - mmengine - INFO - Epoch(train)  [12][12/21]  lr: 9.6900e-04  eta: 5:38:29  time: 5.2480  data_time: 0.2201  loss: 1.0087  loss_cls: 0.3503  loss_bbox: 0.6584
2023/06/07 01:21:10 - mmengine - INFO - Epoch(train)  [12][13/21]  lr: 9.7300e-04  eta: 5:38:24  time: 5.2467  data_time: 0.2190  loss: 1.0073  loss_cls: 0.3505  loss_bbox: 0.6568
2023/06/07 01:21:15 - mmengine - INFO - Epoch(train)  [12][14/21]  lr: 9.7701e-04  eta: 5:38:15  time: 5.2413  data_time: 0.2191  loss: 1.0118  loss_cls: 0.3528  loss_bbox: 0.6590
2023/06/07 01:21:20 - mmengine - INFO - Epoch(train)  [12][15/21]  lr: 9.8101e-04  eta: 5:38:07  time: 5.2387  data_time: 0.2191  loss: 1.0159  loss_cls: 0.3549  loss_bbox: 0.6610
2023/06/07 01:21:25 - mmengine - INFO - Epoch(train)  [12][16/21]  lr: 9.8502e-04  eta: 5:38:00  time: 5.2368  data_time: 0.2192  loss: 1.0167  loss_cls: 0.3542  loss_bbox: 0.6625
2023/06/07 01:21:29 - mmengine - INFO - Epoch(train)  [12][17/21]  lr: 9.8902e-04  eta: 5:37:34  time: 5.2108  data_time: 0.2192  loss: 1.0150  loss_cls: 0.3512  loss_bbox: 0.6637
2023/06/07 01:21:32 - mmengine - INFO - Epoch(train)  [12][18/21]  lr: 9.9302e-04  eta: 5:37:05  time: 5.1772  data_time: 0.2181  loss: 1.0171  loss_cls: 0.3529  loss_bbox: 0.6641
2023/06/07 01:21:37 - mmengine - INFO - Epoch(train)  [12][19/21]  lr: 9.9703e-04  eta: 5:36:55  time: 5.1728  data_time: 0.2180  loss: 1.0176  loss_cls: 0.3521  loss_bbox: 0.6655
2023/06/07 01:21:42 - mmengine - INFO - Epoch(train)  [12][20/21]  lr: 1.0010e-03  eta: 5:36:47  time: 5.1694  data_time: 0.2180  loss: 1.0153  loss_cls: 0.3501  loss_bbox: 0.6653
2023/06/07 01:21:46 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230607_005926
2023/06/07 01:21:46 - mmengine - INFO - Epoch(train)  [12][21/21]  lr: 1.0050e-03  eta: 5:36:20  time: 5.1398  data_time: 0.2167  loss: 1.0225  loss_cls: 0.3542  loss_bbox: 0.6684
2023/06/07 01:21:53 - mmengine - INFO - Epoch(train)  [13][ 1/21]  lr: 1.0090e-03  eta: 5:36:53  time: 5.1933  data_time: 0.2737  loss: 1.0236  loss_cls: 0.3559  loss_bbox: 0.6678
2023/06/07 01:21:57 - mmengine - INFO - Epoch(train)  [13][ 2/21]  lr: 1.0130e-03  eta: 5:36:31  time: 5.1758  data_time: 0.2738  loss: 1.0283  loss_cls: 0.3587  loss_bbox: 0.6695
2023/06/07 01:22:01 - mmengine - INFO - Epoch(train)  [13][ 3/21]  lr: 1.0170e-03  eta: 5:36:07  time: 5.1539  data_time: 0.2738  loss: 1.0305  loss_cls: 0.3594  loss_bbox: 0.6710
2023/06/07 01:22:05 - mmengine - INFO - Epoch(train)  [13][ 4/21]  lr: 1.0211e-03  eta: 5:35:43  time: 5.1323  data_time: 0.2735  loss: 1.0315  loss_cls: 0.3594  loss_bbox: 0.6720
2023/06/07 01:22:10 - mmengine - INFO - Epoch(train)  [13][ 5/21]  lr: 1.0251e-03  eta: 5:35:35  time: 5.1327  data_time: 0.2736  loss: 1.0291  loss_cls: 0.3573  loss_bbox: 0.6718
2023/06/07 01:22:15 - mmengine - INFO - Epoch(train)  [13][ 6/21]  lr: 1.0291e-03  eta: 5:35:31  time: 5.1385  data_time: 0.2749  loss: 1.0305  loss_cls: 0.3602  loss_bbox: 0.6702
2023/06/07 01:22:20 - mmengine - INFO - Epoch(train)  [13][ 7/21]  lr: 1.0331e-03  eta: 5:35:26  time: 5.1428  data_time: 0.2750  loss: 1.0331  loss_cls: 0.3639  loss_bbox: 0.6692
2023/06/07 01:22:25 - mmengine - INFO - Epoch(train)  [13][ 8/21]  lr: 1.0371e-03  eta: 5:35:07  time: 5.1296  data_time: 0.2749  loss: 1.0359  loss_cls: 0.3660  loss_bbox: 0.6700
2023/06/07 01:22:29 - mmengine - INFO - Epoch(train)  [13][ 9/21]  lr: 1.0411e-03  eta: 5:34:44  time: 5.0024  data_time: 0.1866  loss: 1.0345  loss_cls: 0.3654  loss_bbox: 0.6692
2023/06/07 01:22:32 - mmengine - INFO - Epoch(train)  [13][10/21]  lr: 1.0451e-03  eta: 5:34:20  time: 4.9689  data_time: 0.1867  loss: 1.0369  loss_cls: 0.3669  loss_bbox: 0.6699
2023/06/07 01:22:36 - mmengine - INFO - Epoch(train)  [13][11/21]  lr: 1.0491e-03  eta: 5:33:56  time: 4.9411  data_time: 0.1853  loss: 1.0380  loss_cls: 0.3678  loss_bbox: 0.6702
